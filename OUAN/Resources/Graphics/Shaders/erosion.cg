//Texture samplers

sampler texture0 : register(s0);
sampler texture1 : register(s1);
sampler texture2 : register(s2);

// General functions

float2 calculateBlendingTextureUV(float2 uv,float3 displacement,float3 scroll_blending,double tiling)
{
    float2 blending_texture_uv;
           
    blending_texture_uv.x=uv.x+displacement.x+scroll_blending.x;
    blending_texture_uv.y=uv.y+displacement.y+scroll_blending.y; 
    
    blending_texture_uv=blending_texture_uv*tiling;    
        
    return blending_texture_uv;
}

float2 calculateUV(float2 uv,float3 scroll_animation)
{
    uv.x=uv.x+scroll_animation.x;
    uv.y=uv.y+scroll_animation.y;
    
    return uv;
}

// Erosion VS main


void erosionVS
(
    in float4 inPos : POSITION,
    in float2 inUV0 : TEXCOORD0,
    out float4 pos : POSITION,
    out float2 UV0 : TEXCOORD0,

    uniform float4x4 worldViewProj
)
{

    pos = mul(worldViewProj, inPos);

    UV0 = inUV0;
}

// Erosion FS main

void erosionFS(
in float4 color : COLOR,
in float2 uv : TEXCOORD0,
uniform float3 displacement,
uniform float3 scroll_animation,
uniform float3 scroll_blending,
uniform float mix_factor,
uniform float blending,
uniform float tiling,
out float4 oColor : COLOR)
{
    float4 random;
    float normalized_blending_factor;
    
    random=tex2D(texture2,calculateBlendingTextureUV(uv,displacement,scroll_blending,tiling));  
    uv=calculateUV(uv,scroll_animation);
    
    if(random.x>=mix_factor+blending || mix_factor==0.0f)
    {
       oColor=tex2D(texture0,uv);
    }
    else if(random.x<=mix_factor-blending || mix_factor==1.0f)
    {
       oColor=tex2D(texture1,uv);
    }   
    else
    {
       normalized_blending_factor=(random.x-(mix_factor-blending))/(2*blending);
       oColor=normalized_blending_factor*tex2D(texture0,uv)+(1-normalized_blending_factor)*tex2D(texture1,uv); 
    }
}

// Erosion Transparent FS main

void erosion_transparentFS(
in float4 color : COLOR,
in float2 uv : TEXCOORD0,
uniform float3 displacement,
uniform float3 scroll_animation,
uniform float3 scroll_blending,
uniform float mix_factor,
uniform float blending,
uniform float tiling,
out float4 oColor : COLOR)
{
    float4 random;
    float normalized_blending_factor;
    
    random=tex2D(texture2,calculateBlendingTextureUV(uv,displacement,scroll_blending,tiling));  
    uv=calculateUV(uv,scroll_animation);
    
    oColor=tex2D(texture0,uv);
    
    if(random.x>=mix_factor+blending || mix_factor==0.0f)
    {
       oColor.w=1.0f;
    }
    else if(random.x<=mix_factor-blending || mix_factor==1.0f)
    {
       oColor.w=0.0f;
    }   
    else
    {
       normalized_blending_factor=(random.x-(mix_factor-blending))/(2*blending);
       oColor.w=normalized_blending_factor;
    }

}
